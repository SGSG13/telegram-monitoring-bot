import logging
import asyncio
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from website_monitor import WebsiteMonitor
import time
from threading import Thread
from typing import List

logger = logging.getLogger(__name__)

class WebhookMonitoringBot:
    def __init__(self, bot_token: str, user_id: str, monitor: WebsiteMonitor):
        self.bot_token = bot_token
        self.user_id = user_id
        self.monitor = monitor
        self.application = None
        self.is_running = False
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        await update.message.reply_text(
            "ü§ñ –ë–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∞–π—Ç–∞ –∑–∞–ø—É—â–µ–Ω!\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å\n"
            "/check - –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ–π—á–∞—Å\n"
            "/stop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n"
            "/start_monitoring - –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"
        )
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        try:
            page_info = self.monitor.get_page_info()
            if "error" in page_info:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {page_info['error']}")
                return
            
            status_text = (
                f"üìä –°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:\n\n"
                f"üåê –°–∞–π—Ç: {page_info['url']}\n"
                f"üìÑ –ó–∞–≥–æ–ª–æ–≤–æ–∫: {page_info['title']}\n"
                f"üìè –†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {page_info['content_length']} —Å–∏–º–≤–æ–ª–æ–≤\n"
                f"üîç –ò—â–µ–º: {', '.join(page_info['search_names'])}\n"
                f"üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {'–ê–∫—Ç–∏–≤–µ–Ω' if self.is_running else '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}"
            )
            await update.message.reply_text(status_text)
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
    
    async def check_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /check - –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ–π—á–∞—Å"""
        await update.message.reply_text("üîç –í—ã–ø–æ–ª–Ω—è—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ —Ç–∞–º–æ–∂–Ω–∏...")
        
        try:
            found_names = self.monitor.check_for_names()
            if found_names:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
                if any("–í–´–ï–•–ê–õ–ê" in name for name in found_names):
                    message = (
                        f"üöó –£–†–ê! –í–ê–®–ê –ú–ê–®–ò–ù–ê –í–´–ï–•–ê–õ–ê –ò–ó –¢–ê–ú–û–ñ–ù–ò!\n\n"
                        f"üìù –°—Ç–∞—Ç—É—Å:\n" + "\n".join(found_names) + f"\n\n"
                        f"üåê –°–∞–π—Ç: {self.monitor.target_url}\n"
                        f"‚è∞ –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {time.strftime('%Y-%m-%d %H:%M:%S')}"
                    )
                else:
                    message = (
                        f"üìã –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:\n\n"
                        f"üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n" + "\n".join(found_names) + f"\n\n"
                        f"üåê –°–∞–π—Ç: {self.monitor.target_url}\n"
                        f"‚è∞ –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {time.strftime('%Y-%m-%d %H:%M:%S')}"
                    )
                await update.message.reply_text(message)
            else:
                message = (
                    f"‚ùå –í–∞—à–µ –∏–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü–µ\n\n"
                    f"üåê –°–∞–π—Ç: {self.monitor.target_url}\n"
                    f"‚è∞ –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {time.strftime('%Y-%m-%d %H:%M:%S')}"
                )
                await update.message.reply_text(message)
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
    
    async def start_monitoring_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start_monitoring"""
        if self.is_running:
            await update.message.reply_text("üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω!")
            return
        
        self.is_running = True
        await update.message.reply_text("üöÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω! –ë–æ—Ç –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å–∞–π—Ç –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç.")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        Thread(target=self._run_monitoring_loop, daemon=True).start()
    
    async def stop_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop"""
        self.is_running = False
        await update.message.reply_text("‚èπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    
    def _run_monitoring_loop(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        while self.is_running:
            try:
                found_names = self.monitor.check_for_names()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –∏–º–µ–Ω–∞
                if found_names:
                    logger.info(f"–ù–∞–π–¥–µ–Ω—ã –∏–º–µ–Ω–∞: {found_names}")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
                    try:
                        import asyncio
                        loop = asyncio.new_event_loop()
                        asyncio.set_event_loop(loop)
                        
                        async def send_notification():
                            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
                            if any("–í–´–ï–•–ê–õ–ê" in name for name in found_names):
                                message = (
                                    f"üöó –£–†–ê! –í–ê–®–ê –ú–ê–®–ò–ù–ê –í–´–ï–•–ê–õ–ê –ò–ó –¢–ê–ú–û–ñ–ù–ò!\n\n"
                                    f"üìù –°—Ç–∞—Ç—É—Å:\n" + "\n".join(found_names) + f"\n\n"
                                    f"üåê –°–∞–π—Ç: {self.monitor.target_url}\n"
                                    f"‚è∞ –í—Ä–µ–º—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è: {time.strftime('%Y-%m-%d %H:%M:%S')}"
                                )
                            else:
                                message = (
                                    f"üìã –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞:\n\n"
                                    f"üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n" + "\n".join(found_names) + f"\n\n"
                                    f"üåê –°–∞–π—Ç: {self.monitor.target_url}\n"
                                    f"‚è∞ –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {time.strftime('%Y-%m-%d %H:%M:%S')}"
                                )
                            
                            await self.application.bot.send_message(
                                chat_id=self.user_id,
                                text=message
                            )
                        
                        loop.run_until_complete(send_notification())
                        loop.close()
                        
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
                
                # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                time.sleep(600)  # 10 –º–∏–Ω—É—Ç
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                time.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    async def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥"""
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("status", self.status_command))
        self.application.add_handler(CommandHandler("check", self.check_command))
        self.application.add_handler(CommandHandler("start_monitoring", self.start_monitoring_command))
        self.application.add_handler(CommandHandler("stop", self.stop_command))
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        try:
            self.application = Application.builder().token(self.bot_token).build()
            await self.setup_handlers()
            
            logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π polling
            await self.application.initialize()
            await self.application.start()
            await self.application.updater.start_polling()
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —á–µ—Ä–µ–∑ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
            while True:
                await asyncio.sleep(1)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
            raise 